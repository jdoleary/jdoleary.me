{"version":3,"sources":["src/util.js","node_modules/pie-client/src/enums.js","node_modules/pie-client/src/PieClient.js","node_modules/pie-client/index.js","src/network.js","src/index.js"],"names":["rand_color","r","Math","floor","rand_between","g","b","low","high","random","pie","connect","onData","PieClient","wsUri","onConnectInfo","connected","makeRoom","room_info","catch","joinRoom","then","console","log","err","app","version","AVG_MS_PER_FRAME","GRAVITY","NUMBER_OF_SPARKS","points","glitter","canvas","document","getElementById","adjustCanvasSize","width","window","innerWidth","height","innerHeight","onresize","ctx","getContext","draw","timestamp","gameLoop","clearRect","p","set_color","c","fillRect","x","y","requestAnimationFrame","color","fillStyle","addEventListener","e","onClick","offsetX","offsetY","lastTime","dt","i","length","vx","vy","splice","j","spark","push","launch_firework","sendData","message","payload"],"mappings":";;;AAQC,aARM,SAASA,IAIP,MAAA,CAAEC,EAHCC,KAAKC,MAAMC,EAAa,EAAG,MAGzBC,EAFFH,KAAKC,MAAMC,EAAa,EAAG,MAEtBE,EADLJ,KAAKC,MAAMC,EAAa,EAAG,OAGhC,SAASA,EAAaG,EAAKC,GACzBN,OAAAA,KAAKO,UAAYD,EAAOD,GAAOA,EACvC,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,WAAA,EAAA,QAAA,aAAA;;ACRD,MAAA,EAAA,CAEA,KAAA,OAEA,MAAA,QACA,sBAAA,wBACA,mBAAA,qBACA,IAAA,MACA,eAAA,iBACA,cAAA,gBAEA,SAAA,WACA,SAAA,WACA,UAAA,YACA,SAAA,WAEA,YAAA,eAGA,EAAA,CACA,SAAA,YAGA,OAAA,QAAA,CACA,YAAA,EACA,YAAA;;ACzBA,MAAA,YAAA,GAAA,QAAA,WAWA,MAAA,EACA,aAAA,IACA,EAAA,cAAA,MACA,EAAA,OACA,EAAA,QACA,EAAA,qBACA,EAAA,wBACA,EAAA,QACA,EAAA,cACA,IAEA,KAAA,IAAA,EACA,KAAA,MAAA,EACA,KAAA,OAAA,EACA,KAAA,QAAA,GAAA,QAAA,MACA,KAAA,qBAAA,EACA,KAAA,wBAAA,EACA,KAAA,QAAA,EACA,KAAA,cAAA,EACA,KAAA,WAAA,EACA,KAAA,WAAA,CACA,SAAA,KACA,SAAA,MAGA,KAAA,cAAA,SAAA,cAAA,oCACA,KAAA,gBACA,KAAA,cAAA,MAAA,kBAAA,OACA,KAAA,cAAA,MAAA,SAAA,WACA,KAAA,cAAA,MAAA,IAAA,OACA,KAAA,cAAA,MAAA,KAAA,OACA,KAAA,cAAA,MAAA,eAAA,QAGA,KAAA,GAAA,IAAA,UAAA,GACA,KAAA,GAAA,UAAA,CAAA,IACA,IACA,MAAA,EAAA,KAAA,MAAA,EAAA,MACA,OAAA,EAAA,MACA,KAAA,EAAA,KACA,KAAA,OAAA,GACA,MACA,KAAA,EAAA,eACA,KAAA,WAAA,EAAA,OACA,KAAA,WAAA,EAAA,MAAA,UAEA,MACA,KAAA,EAAA,cACA,KAAA,WAAA,EAAA,OACA,KAAA,WAAA,EAAA,MAAA,OAAA,EAAA,KAEA,MACA,KAAA,EAAA,mBACA,KAAA,sBACA,KAAA,qBAAA,GAEA,MACA,KAAA,EAAA,sBACA,KAAA,iBAAA,GAGA,KAAA,yBACA,KAAA,wBAAA,GAEA,MACA,KAAA,EAAA,MACA,KAAA,SACA,KAAA,QAAA,GAEA,MACA,KAAA,EAAA,IACA,QAAA,MAAA,GACA,KAAA,QAAA,GACA,MACA,QACA,QAAA,IAAA,GACA,QAAA,+BAAA,EAAA,yBAEA,MAAA,GACA,QAAA,MAAA,GACA,KAAA,QAAA,MAGA,KAAA,GAAA,OAAA,MACA,KAAA,WAAA,EACA,KAAA,mBAGA,KAAA,eACA,KAAA,cAAA,CACA,KAAA,EAAA,YACA,UAAA,KAAA,UACA,4BAAA,KAAA,YAIA,KAAA,GAAA,QAAA,MACA,KAAA,WAAA,EACA,KAAA,mBAGA,KAAA,eACA,KAAA,cAAA,CACA,KAAA,EAAA,YACA,UAAA,KAAA,UACA,qBAAA,KAAA,oBAKA,SAAA,GACA,OAAA,KAAA,WAEA,KAAA,WAAA,EAAA,WACA,KAAA,WAAA,EAAA,UAAA,OAAA,CAAA,IAAA,4CAEA,IAAA,QAAA,CAAA,EAAA,KAGA,KAAA,WAAA,EAAA,UAAA,CAAA,QAAA,EAAA,OAAA,GACA,KAAA,GAAA,KACA,KAAA,UAAA,CACA,KAAA,EAAA,SACA,SAAA,QAKA,QAAA,OAAA,CAAA,IAAA,mEAGA,SAAA,GACA,OAAA,KAAA,WAEA,KAAA,WAAA,EAAA,WACA,KAAA,WAAA,EAAA,UAAA,OAAA,CAAA,IAAA,4CAEA,IAAA,QAAA,CAAA,EAAA,KAGA,KAAA,WAAA,EAAA,UAAA,CAAA,QAAA,EAAA,OAAA,GACA,KAAA,GAAA,KACA,KAAA,UAAA,CACA,KAAA,EAAA,SACA,SAAA,QAKA,QAAA,OAAA,CAAA,IAAA,mEAGA,YACA,KAAA,UACA,KAAA,GAAA,KACA,KAAA,UAAA,CACA,KAAA,EAAA,aAIA,KAAA,QAAA,CAAA,IAAA,oEAGA,SAAA,GACA,KAAA,UACA,KAAA,GAAA,KACA,KAAA,UAAA,CACA,KAAA,EAAA,SACA,SAAA,KAIA,KAAA,QAAA,CAAA,IAAA,mEAGA,SAAA,EAAA,GACA,KAAA,UACA,KAAA,GAAA,KACA,KAAA,UAAA,CACA,KAAA,EAAA,KACA,QAAA,KACA,KAIA,KAAA,QAAA,CAAA,IAAA,2EAGA,iBAAA,GACA,IACA,GAAA,KAAA,cAAA,CACA,GAAA,KAAA,UAAA,CACA,MAAA,EAAA,GAAA,EAAA,SAAA,EAAA,QAAA,QAAA,EACA,KAAA,cAAA,eACA,GAAA,KAAA,YAAA,2BAGA,KAAA,cAAA,UAAA,iBAEA,KAAA,cAAA,MAAA,MAAA,KAAA,UAAA,QAAA,OAEA,MAAA,GACA,QAAA,MAAA,KAIA,OAAA,QAAA;;ACzNA,MAAA,EAAA,QAAA,mBACA,OAAA,QAAA;;ACuBA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA,EAAA,QAAA,SAAA,EAxBA,IAEWG,EAFX,EAAA,EAAA,QAAA,eAwBA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GArBO,SAASC,EAAQC,GAItBF,QAAAA,IAAAA,EAAM,IAAIG,EAAJ,QAAc,CAClBC,MAFY,gDAGZF,OAAAA,EACAG,cAAe,SAAmB,GAAhBC,EAAAA,WAGZN,EAAIO,SAASC,GAGZC,MAAM,WAAMT,OAAAA,EAAIU,SAASF,KACzBG,KAAK,WAAMC,OAAAA,QAAQC,IAAI,6BACvBJ,MAAM,SAAAK,GAAOF,OAAAA,QAAQC,IAAI,sBAAsBC,QAM1D,QAAA,IAAA,EAAA,IAAMN,EAAY,CAChBO,IAAK,iBACLC,QAAS;;ACkFX,aA5GA,QAAA,gBACA,IAAA,EAAA,QAAA,aACA,EAAA,QAAA,gBA0GA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,GAAA,oBAAA,QAAA,MAAA,EAAA,OAAA,UAAA,CAAA,GAAA,MAAA,QAAA,KAAA,EAAA,EAAA,KAAA,GAAA,GAAA,iBAAA,EAAA,OAAA,CAAA,IAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,aAAA,MAAA,CAAA,EAAA,EAAA,EAAA,WAAA,OAAA,GAAA,EAAA,OAAA,CAAA,MAAA,GAAA,CAAA,MAAA,EAAA,MAAA,EAAA,OAAA,EAAA,SAAA,GAAA,MAAA,GAAA,EAAA,GAAA,MAAA,IAAA,UAAA,yIAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,MAAA,CAAA,EAAA,WAAA,EAAA,EAAA,OAAA,aAAA,EAAA,WAAA,IAAA,EAAA,EAAA,OAAA,OAAA,EAAA,EAAA,KAAA,GAAA,EAAA,SAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,WAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,KAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAxGA,IAAMC,EAAmB,GACnBC,EAAU,IAAMD,EAChBE,EAAmB,GAErBC,EAAS,GACTC,EAAU,GAGVC,EAASC,SAASC,eAAe,UACrC,SAASC,IACPH,EAAOI,MAAQC,OAAOC,WACtBN,EAAOO,OAASF,OAAOG,YAEzBH,OAAOI,SAAWN,EAClBA,IACA,IAAMO,EAAMV,EAAOW,WAAW,MACV,GAAA,EAAA,EAAA,cAAZ1C,EAAAA,EAAAA,EAAGI,EAAAA,EAAAA,EAAGC,EAAAA,EAAAA,EAUd,SAASsC,EAAKC,GACZC,EAASD,GACTH,EAAIK,UAAU,EAAG,EAAGf,EAAOI,MAAOJ,EAAOO,QAC3BT,IAHS,EAGTA,EAAAA,EAAAA,GAHS,IAGD,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAAbkB,IAAAA,EAAa,EAAA,MACpBC,EAAUD,EAAEE,GACZR,EAAIS,SAASH,EAAEI,EAAGJ,EAAEK,EAAG,GAAI,KALN,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,IAOTtB,IAPS,EAOTA,EAAAA,EAAAA,GAPS,IAOA,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAAdiB,IAAAA,EAAc,EAAA,MACrBC,EAAUD,EAAEE,GACZR,EAAIS,SAASH,EAAEI,EAAGJ,EAAEK,EAAG,GAAI,KATN,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,IAWvBC,sBAAsBV,GAExB,SAASK,EAAUM,GACdA,GAAAA,EAAM,CACAtD,IAAAA,EAASsD,EAATtD,EAAEI,EAAOkD,EAAPlD,EAAEC,EAAKiD,EAALjD,EACXoC,EAAIc,UAAY,OAASvD,EAAI,IAAMI,EAAI,IAAMC,EAAI,KAzBrDoC,EAAIc,UAAY,OAASvD,EAAI,IAAMI,EAAI,IAAMC,EAAI,IAEjD0B,EAAOyB,iBAAiB,YAAa,SAACC,GAIpCC,EAFUD,EAAEE,QACFF,EAAEG,WAyBd,IAAIC,EAAW,EACf,SAAShB,EAASD,GACVkB,IAAAA,EAAKlB,EAAYiB,EACvBA,EAAWjB,EAEN,IAAA,IAAImB,EAAIlC,EAAOmC,OAAQD,GAAK,EAAGA,IAAK,CACjChB,IAAAA,EAAIlB,EAAOkC,GACbhB,GAAAA,IACFA,EAAEI,GAAKW,EAAKf,EAAEkB,GACdlB,EAAEmB,IAAOvC,EACToB,EAAEK,GAAKU,EAAKf,EAAEmB,GACVnB,EAAEmB,GAAK,GAAG,CACZrC,EAAOsC,OAAOJ,EAAG,GACZ,IAAA,IAAIK,EAAI,EAAGA,EAAIxC,EAAkBwC,IACpCC,EAAMtB,EAAEI,EAAGJ,EAAEK,EAAGL,EAAEE,IAKrB,IAAA,IAAIc,EAAIjC,EAAQkC,OAAQD,GAAK,EAAGA,IAAK,CAClChB,IAAAA,EAAIjB,EAAQiC,GACdhB,IACFA,EAAEI,GAAKW,EAAKf,EAAEkB,GACdlB,EAAEmB,IAAOvC,EACToB,EAAEK,GAAKU,EAAKf,EAAEmB,GAEVnB,EAAEK,EAAIrB,EAAOO,QACfR,EAAQqC,OAAOJ,EAAG,KAM1B,SAASM,EAAMlB,EAAGC,EAAGH,GACbgB,IAAAA,GAAK,EAAa,EAAA,eAAC,GAAGvC,EAAkB,GAAGA,GAC3CwC,GAAK,EAAa,EAAA,eAAC,GAAGxC,EAAkB,GAC9CI,EAAQwC,KAAK,CAAEnB,EAAAA,EAAGC,EAAAA,EAAGa,GAAAA,EAAIC,GAAAA,EAAIjB,EAAAA,IAK/B,SAASsB,EAAgBpB,EAAEC,GACzBvB,EAAOyC,KAAK,CAAEnB,EAAAA,EAAGC,EAAAA,EAAGa,GAAI,EAAGC,IAAK,GAAGxC,EAAkBuB,GAAG,EAAA,EAAA,gBAE1D,SAASS,EAAQP,EAAEC,GACd3C,EAAIM,IAAAA,UACDyD,EAAAA,IAAAA,SAAS,CAACrB,EAAAA,EAAEC,EAAAA,IAEhBmB,EAAgBpB,EAAEC,GAItB,SAASzC,EAAO8D,GACdpD,QAAQC,IAAI,oBAAqBmD,GACnBA,IAAAA,EAAAA,EAAQC,QACtBH,EADOpB,EAAAA,EAAEC,EAAAA,GAfXC,sBAAsBV,IAkBtB,EAAQhC,EAAAA,SAAAA","file":"src.a0083fdb.js","sourceRoot":"..","sourcesContent":["export function rand_color() {\r\n  const r = Math.floor(rand_between(0, 255));\r\n  const g = Math.floor(rand_between(0, 255));\r\n  const b = Math.floor(rand_between(0, 255));\r\n  return { r, g, b };\r\n}\r\nexport function rand_between(low, high) {\r\n  return Math.random() * (high - low) + low;\r\n}\r\n","const MessageType = {\r\n  // Both client and server:\r\n  Data: 'Data',\r\n  // Server to client:\r\n  Rooms: 'Rooms',\r\n  ClientPresenceChanged: 'ClientPresenceChanged',\r\n  ServerAssignedData: 'ServerAssignedData',\r\n  Err: 'Err',\r\n  ResolvePromise: 'ResolvePromise',\r\n  RejectPromise: 'RejectPromise',\r\n  // Client to Server:\r\n  MakeRoom: 'MakeRoom',\r\n  JoinRoom: 'JoinRoom',\r\n  LeaveRoom: 'LeaveRoom',\r\n  GetRooms: 'GetRooms',\r\n  // Unique to PieClient\r\n  ConnectInfo: 'ConnectInfo',\r\n};\r\n\r\nconst DataSubType = {\r\n  Together: 'Together',\r\n};\r\n\r\nmodule.exports = {\r\n  MessageType,\r\n  DataSubType,\r\n};\r\n","const { MessageType } = require('./enums');\r\n\r\n/*\r\nenv: 'development' | 'production'\r\nwsUri: websocket uri of a PieServer instance\r\nws: websocket connection\r\nonData: a callback that is send data emitted by the PieServer\r\nonInfo: a callback to send information about the connection\r\nonError: a callback to send error messages\r\n*/\r\n\r\nclass PieClient {\r\n  constructor({\r\n    env = 'development',\r\n    wsUri,\r\n    onData,\r\n    onError,\r\n    onServerAssignedData,\r\n    onClientPresenceChanged,\r\n    onRooms,\r\n    onConnectInfo,\r\n  }) {\r\n    this.env = env;\r\n    this.wsUri = wsUri;\r\n    this.onData = onData;\r\n    this.onError = onError || console.error;\r\n    this.onServerAssignedData = onServerAssignedData;\r\n    this.onClientPresenceChanged = onClientPresenceChanged;\r\n    this.onRooms = onRooms;\r\n    this.onConnectInfo = onConnectInfo;\r\n    this.connected = false;\r\n    this.promiseCBs = {\r\n      makeRoom: null,\r\n      joinRoom: null,\r\n    };\r\n    // Optionally support a connection status element\r\n    this.statusElement = document.querySelector('#websocket-pie-connection-status');\r\n    if (this.statusElement) {\r\n      this.statusElement.style['pointer-events'] = 'none';\r\n      this.statusElement.style['position'] = 'absolute';\r\n      this.statusElement.style['top'] = '10px';\r\n      this.statusElement.style['left'] = '10px';\r\n      this.statusElement.style['user-select'] = 'none';\r\n    }\r\n\r\n    this.ws = new WebSocket(wsUri);\r\n    this.ws.onmessage = event => {\r\n      try {\r\n        const message = JSON.parse(event.data);\r\n        switch (message.type) {\r\n          case MessageType.Data:\r\n            this.onData(message);\r\n            break;\r\n          case MessageType.ResolvePromise:\r\n            if (this.promiseCBs[message.func]) {\r\n              this.promiseCBs[message.func].resolve();\r\n            }\r\n            break;\r\n          case MessageType.RejectPromise:\r\n            if (this.promiseCBs[message.func]) {\r\n              this.promiseCBs[message.func].reject(message.err);\r\n            }\r\n            break;\r\n          case MessageType.ServerAssignedData:\r\n            if (this.onServerAssignedData) {\r\n              this.onServerAssignedData(message);\r\n            }\r\n            break;\r\n          case MessageType.ClientPresenceChanged:\r\n            this._updateDebugInfo(message);\r\n            // If client is accepting the onClientPresenceChanged callback,\r\n            // send the message to it\r\n            if (this.onClientPresenceChanged) {\r\n              this.onClientPresenceChanged(message);\r\n            }\r\n            break;\r\n          case MessageType.Rooms:\r\n            if (this.onRooms) {\r\n              this.onRooms(message);\r\n            }\r\n            break;\r\n          case MessageType.Err:\r\n            console.error(message);\r\n            this.onError(message);\r\n            break;\r\n          default:\r\n            console.log(message);\r\n            console.error(`Above message of type ${message.type} not recognized!`);\r\n        }\r\n      } catch (e) {\r\n        console.error(e);\r\n        this.onError(e);\r\n      }\r\n    };\r\n    this.ws.onopen = () => {\r\n      this.connected = true;\r\n      this._updateDebugInfo();\r\n      // If client is accepting the onConnectInfo callback,\r\n      // send the message to it\r\n      if (this.onConnectInfo) {\r\n        this.onConnectInfo({\r\n          type: MessageType.ConnectInfo,\r\n          connected: this.connected,\r\n          msg: `Opened connection to ${this.wsUri}`,\r\n        });\r\n      }\r\n    };\r\n    this.ws.onclose = () => {\r\n      this.connected = false;\r\n      this._updateDebugInfo();\r\n      // If client is accepting the onConnectInfo callback,\r\n      // send the message to it\r\n      if (this.onConnectInfo) {\r\n        this.onConnectInfo({\r\n          type: MessageType.ConnectInfo,\r\n          connected: this.connected,\r\n          msg: `Connection to ${this.wsUri} closed.`,\r\n        });\r\n      }\r\n    };\r\n  }\r\n  makeRoom(roomInfo) {\r\n    if (this.connected) {\r\n      // Cancel previous makeRoom promise if it exists\r\n      if (this.promiseCBs[MessageType.MakeRoom]) {\r\n        this.promiseCBs[MessageType.MakeRoom].reject({ msg: 'Cancelled due to newer makeRoom request' });\r\n      }\r\n      return new Promise((resolve, reject) => {\r\n        // Assign callbacks so that the response from the server can\r\n        // fulfill this promise\r\n        this.promiseCBs[MessageType.MakeRoom] = { resolve, reject };\r\n        this.ws.send(\r\n          JSON.stringify({\r\n            type: MessageType.MakeRoom,\r\n            roomInfo,\r\n          }),\r\n        );\r\n      });\r\n    } else {\r\n      return Promise.reject({ msg: `Cannot make room, not currently connected to web socket server` });\r\n    }\r\n  }\r\n  joinRoom(roomInfo) {\r\n    if (this.connected) {\r\n      // Cancel previous joinRoom promise if it exists\r\n      if (this.promiseCBs[MessageType.JoinRoom]) {\r\n        this.promiseCBs[MessageType.JoinRoom].reject({ msg: 'Cancelled due to newer joinRoom request' });\r\n      }\r\n      return new Promise((resolve, reject) => {\r\n        // Assign callbacks so that the response from the server can\r\n        // fulfill this promise\r\n        this.promiseCBs[MessageType.JoinRoom] = { resolve, reject };\r\n        this.ws.send(\r\n          JSON.stringify({\r\n            type: MessageType.JoinRoom,\r\n            roomInfo,\r\n          }),\r\n        );\r\n      });\r\n    } else {\r\n      return Promise.reject({ msg: `Cannot join room, not currently connected to web socket server` });\r\n    }\r\n  }\r\n  leaveRoom() {\r\n    if (this.connected) {\r\n      this.ws.send(\r\n        JSON.stringify({\r\n          type: MessageType.LeaveRoom,\r\n        }),\r\n      );\r\n    } else {\r\n      this.onError({ msg: `Cannot leave room, not currently connected to web socket server` });\r\n    }\r\n  }\r\n  getRooms(roomInfo) {\r\n    if (this.connected) {\r\n      this.ws.send(\r\n        JSON.stringify({\r\n          type: MessageType.GetRooms,\r\n          roomInfo,\r\n        }),\r\n      );\r\n    } else {\r\n      this.onError({ msg: `Cannot get rooms, not currently connected to web socket server` });\r\n    }\r\n  }\r\n  sendData(payload, extras) {\r\n    if (this.connected) {\r\n      this.ws.send(\r\n        JSON.stringify({\r\n          type: MessageType.Data,\r\n          payload,\r\n          ...extras,\r\n        }),\r\n      );\r\n    } else {\r\n      this.onError({ msg: `Cannot send data to room, not currently connected to web socket server` });\r\n    }\r\n  }\r\n  _updateDebugInfo(message) {\r\n    try {\r\n      if (this.statusElement) {\r\n        if (this.connected) {\r\n          const numberOfClients = (message && message.clients && message.clients.length) || 1;\r\n          this.statusElement.innerHTML = `⬤ ${\r\n            numberOfClients == 1 ? `${numberOfClients} User` : `${numberOfClients} Users`\r\n          } Connected`;\r\n        } else {\r\n          this.statusElement.innerHTML = `⬤ Disconnected`;\r\n        }\r\n        this.statusElement.style.color = this.connected ? 'green' : 'red';\r\n      }\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n  }\r\n}\r\nmodule.exports = PieClient;\r\n","const PieClient = require('./src/PieClient');\r\nmodule.exports = PieClient;\r\n","import PieClient from \"pie-client\";\r\n\r\nexport let pie;\r\nexport function connect(onData) {\r\n  // A url running PieServer\r\n  // const wsUri = \"ws://192.168.0.21:8080\";\r\n  const wsUri = 'wss://websocket-pie-e4elx.ondigitalocean.app/';\r\n  pie = new PieClient({\r\n    wsUri,\r\n    onData,\r\n    onConnectInfo: ({ connected }) => {\r\n      // Make and join room\r\n      if(connected){\r\n          pie.makeRoom(room_info)\r\n          // Since the room_info is hard-coded,\r\n          // if you can't make the room, it may be already made, so try to join it instead.\r\n          .catch(() => pie.joinRoom(room_info))\r\n          .then(() => console.log('You are now in the room'))\r\n          .catch(err => console.log('Failed to join room',err));\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\nconst room_info = {\r\n  app: \"fireworks_demo\",\r\n  version: \"0.1.0\"\r\n}\r\n","import './styles.css';\r\nimport { rand_color, rand_between } from './util.js';\r\nimport { pie, connect } from './network.js'\r\n// Constants\r\nconst AVG_MS_PER_FRAME = 16;\r\nconst GRAVITY = 15/60/AVG_MS_PER_FRAME;\r\nconst NUMBER_OF_SPARKS = 20;\r\n// Game Objects\r\nlet points = [];\r\nlet glitter = [];\r\n\r\n// Setup the canvas\r\nlet canvas = document.getElementById('canvas');\r\nfunction adjustCanvasSize() {\r\n  canvas.width = window.innerWidth;\r\n  canvas.height = window.innerHeight;\r\n}\r\nwindow.onresize = adjustCanvasSize;\r\nadjustCanvasSize();\r\nconst ctx = canvas.getContext('2d');\r\nconst { r, g, b } = rand_color();\r\nctx.fillStyle = 'rgb(' + r + ',' + g + ',' + b + ')';\r\n\r\ncanvas.addEventListener('mousedown', (e) => {\r\n  // Note: top left corner is 0,0 so -y is up\r\n  const x = e.offsetX;\r\n  const y = e.offsetY;\r\n  onClick(x,y);\r\n});\r\n\r\nfunction draw(timestamp) {\r\n  gameLoop(timestamp);\r\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n  for (let p of points) {\r\n    set_color(p.c)\r\n    ctx.fillRect(p.x, p.y, 10, 10);\r\n  }\r\n  for (let p of glitter) {\r\n    set_color(p.c)\r\n    ctx.fillRect(p.x, p.y, 10, 10);\r\n  }\r\n  requestAnimationFrame(draw);\r\n}\r\nfunction set_color(color){\r\n  if(color){\r\n    const {r,g,b} = color\r\n    ctx.fillStyle = 'rgb(' + r + ',' + g + ',' + b + ')';\r\n  }\r\n\r\n}\r\n\r\nlet lastTime = 0;\r\nfunction gameLoop(timestamp) {\r\n  const dt = timestamp - lastTime\r\n  lastTime = timestamp\r\n\r\n  for (let i = points.length; i >= 0; i--) {\r\n    const p = points[i];\r\n    if (p) {\r\n      p.x += dt * p.vx;\r\n      p.vy +=  GRAVITY;\r\n      p.y += dt * p.vy;\r\n      if (p.vy > 0) {\r\n        points.splice(i, 1);\r\n        for (let j = 0; j < NUMBER_OF_SPARKS; j++) {\r\n          spark(p.x, p.y, p.c);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  for (let i = glitter.length; i >= 0; i--) {\r\n    const p = glitter[i];\r\n    if (p) {\r\n      p.x += dt * p.vx;\r\n      p.vy +=  GRAVITY;\r\n      p.y += dt * p.vy;\r\n      // remove when they go off screen\r\n      if (p.y > canvas.height) {\r\n        glitter.splice(i, 1);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction spark(x, y, c) {\r\n  const vx = rand_between(-10/AVG_MS_PER_FRAME, 10/AVG_MS_PER_FRAME);\r\n  const vy = rand_between(-10/AVG_MS_PER_FRAME, 0);\r\n  glitter.push({ x, y, vx, vy, c });\r\n}\r\n\r\nrequestAnimationFrame(draw);\r\n\r\nfunction launch_firework(x,y){\r\n  points.push({ x, y, vx: 0, vy: -15/AVG_MS_PER_FRAME, c: rand_color() });\r\n}\r\nfunction onClick(x,y){\r\n  if(pie.connected){\r\n    pie.sendData({x,y});\r\n  }else {\r\n    launch_firework(x,y)\r\n  }\r\n}\r\n\r\nfunction onData(message){\r\n  console.log(\"onData -> message\", message)\r\n  const {x,y} = message.payload;\r\n  launch_firework(x,y)\r\n}\r\nconnect(onData);"]}